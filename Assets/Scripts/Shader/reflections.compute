#pragma enable_d3d11_debug_symbols
#pragma kernel ReflectionPass

#include "tracingUtils.hlsl"

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
//#include "Library/PackageCache/com.unity.render-pipelines.core@7.4.3/ShaderLibrary/Random.hlsl"
//#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Packing.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
//#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Builtin/BuiltinData.hlsl"

//#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/NormalBuffer.hlsl"

RWTexture2D<float4> texOut;

Texture2D<float4> skybox;
SamplerState sampler_skybox;

ConsumeStructuredBuffer<Ray> rays;

StructuredBuffer<Mesh> meshes;
StructuredBuffer<float3> meshVertices;
StructuredBuffer<int> meshEbo;
StructuredBuffer<LBVH> bvhTree;

float4x4 worldToCamera;
float4x4 invProj;

void TraverseTree(Ray r, inout RayHit hit)
{
    int stackNodes[32];
    
    //This is useful to know which branch to choose 
    // if the axis splits is neg in the ray then we take the right hand branch (second child)
    // we can do this because we ordered the splitting during the construction
    bool isDirNeg[] = {r.invDir.x < 0, r.invDir.y < 0, r.invDir.z < 0};

    int toVisitOffset = 0, currentNodeIndex = 0;

    while (true)
    {
        LBVH node = bvhTree[currentNodeIndex];

        if (rayBoxIntersection(node.minBox, node.maxBox, r))
        {
            if ((node.primAndAxis >> 16)) //it's a leaf
            {
                //For now we have only one primitive in the leaf so we can simplify things
                RayHit tmp = hit;
                
                //float4x4 localToWorldMatrix = meshes[node.offset].localToWorld;
                float3 a,b,c;
                int count = meshes[node.offset].eboCount;
                for(int i = meshes[node.offset].eboOffset; i < count; i+=3)
                {
                     a = meshVertices[meshEbo[i]];
                    b = meshVertices[meshEbo[i + 1]];
                     c = meshVertices[meshEbo[i + 2]];

                  //  a = meshVertices[i];
                   // b = (meshVertices[i + 1]);
                  //  c = (meshVertices[i + 2]);
                    
                  //  a = mul(localToWorldMatrix, a);
                 //   b = mul(localToWorldMatrix, b);
                 //   c = mul(localToWorldMatrix, c);
                    
                    TriangleIntersection(r, tmp, a, b, c);
                    
                    if(hit.alpha > tmp.alpha)
                    {
                        hit = tmp;
                        hit.color = meshes[node.offset].color;
                    }
                }
                
                if (toVisitOffset == 0) break;
                currentNodeIndex = stackNodes[--toVisitOffset];
            }
            else
            {
                if (isDirNeg[node.primAndAxis & 3])
                {
                    stackNodes[toVisitOffset++] = currentNodeIndex + 1; //left hand child
                    currentNodeIndex = node.offset;
                }
                else
                {
                    stackNodes[toVisitOffset++] = node.offset;
                    currentNodeIndex = currentNodeIndex + 1;
                }
            }
        }
        else
        {
            if (toVisitOffset == 0) break;
            currentNodeIndex = stackNodes[--toVisitOffset];
        }
    }
}

void Trace(Ray r, inout RayHit hit)
{
    //Traverse the bvhTree
    // find the nearest hit if any
    
    TraverseTree(r, hit);
}

[numthreads(64, 1, 1)]
void ReflectionPass(uint3 id : SV_DispatchThreadID)
{
  Ray r = rays.Consume();
  RayHit hit;
  hit.alpha = _ProjectionParams.z + 1;
     
  //We can optimize this by stopping at the first hit
  //beware of alpha materials (leaf)
  Trace(r, hit);
     
  if(hit.alpha > _ProjectionParams.z) //we've hit nothing
  {
      //switching to spherical coordinates to sample the skybox
      float theta = acos(r.direction.y) / -PI;
      float phi = atan2(r.direction.x, -r.direction.z) / -HALF_PI;

      hit.color = skybox.SampleLevel(sampler_skybox, float2(phi, theta), 0);
  }

    float4 pos = mul(worldToCamera, float4(r.a, 1.0f));
    pos = mul(invProj, pos);
    pos /= pos.w;

    pos= (pos + 1.0f) / 2.0f;

    float2 texsize;
    texOut.GetDimensions(texsize.x, texsize.y);

    texOut[pos.xy * texsize] = float4(hit.color, 1.0f);
     
  //TODO: blur the reflection
  //hit.color * normalData.perceptualRoughness, 1.0f);
}